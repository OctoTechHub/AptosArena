#!/usr/bin/env node

// On MacOS we install the CLI with brew. There are two main reasons for this:
// 1. Brew builds the CLI for the native CPU architecture for the user, which
//    eliminates any issues arising from using x86 binaries on ARM machines.
// 2. Brew handles dependency management for us. This isn't relevant right now but
//    might become necessary later if we reintroduce OpenSSL as a dep for the CLI.
//
// On Linux and Windows we just query the GH API for the latest CLI release and
// download and extract that.

const { execSync, spawn } = require("child_process");
const fs = require("fs");
const os = require("os");

const PNAME = "aptos-cli";
const GH_CLI_DOWNLOAD_URL =
  "https://github.com/aptos-labs/aptos-core/releases/download";

// Wrapper around execSync that uses the shell.
const execSyncShell = (command, options) => {
  return execSync(command, { shell: true, ...options });
};

// Determine what OS we're running on.
const getOS = () => {
  const platform = os.platform();
  switch (platform) {
    case "darwin":
      return "MacOS";
    case "linux":
      return "Ubuntu";
    case "win32":
      return "Windows";
    default:
      throw new Error(`Unsupported OS ${platform}`);
  }
};

// Only works on Unix systems. This is fine because we only need to check for brew on
// MacOS.
const executableIsAvailable = (name) => {
  try {
    execSyncShell(`which ${name}`, { encoding: "utf8" });
    return true;
  } catch (error) {
    return false;
  }
};

// Query the GitHub API to find the latest CLI release. We assume that the CLI is in
// the last 100 releases so we don't paginate through the releases.
const getLatestVersionGh = async () => {
  const prefix = `${PNAME}-v`;
  const response = await (
    await fetch(
      "https://api.github.com/repos/aptos-labs/aptos-core/releases?per_page=100"
    )
  ).json();
  for (release of response) {
    if (release["tag_name"].startsWith(`${prefix}`)) {
      return release.tag_name.replace(`${prefix}`, "");
    }
  }
  throw "Could not determine latest version of Aptos CLI";
};

// Use brew to find the latest version of the CLI. Make sure to confirm that brew
// is installed before calling this function.
const getLatestVersionBrew = () => {
  const out = JSON.parse(
    execSyncShell("brew info --json aptos", { encoding: "utf8" })
  );
  return out[0].versions.stable;
};

// Determine the latest version of the CLI.
const getLatestVersion = async () => {
  if (getOS() === "MacOS") {
    return getLatestVersionBrew();
  } else {
    return getLatestVersionGh();
  }
};

// Determine the current SSL version
const getCurrentOpenSSLVersion = () => {
  const out = execSyncShell("openssl version", { encoding: "utf8" });
  return out.split(" ")[1].trim();
};

// Based on the installation path of the aptos formula, determine the path where the
// CLI should be installed.
const getCliPathBrew = () => {
  const directory = execSyncShell("brew --prefix aptos", { encoding: "utf8" })
    .toString()
    .trim();
  return `${directory}/bin/aptos`;
};

// Install or update the CLI.
const installCli = (os, path, latestCLIVersion) => {
  console.log(`Downloading aptos CLI version ${latestCLIVersion}`);
  if (os === "Windows") {
    const url = `${GH_CLI_DOWNLOAD_URL}/${PNAME}-v${latestCLIVersion}/${PNAME}-${latestCLIVersion}-${os}-x86_64.zip`;
    // Download the zip file, extract it, and move the binary to the correct location.
    execSync(
      `powershell -Command "if (!(Test-Path -Path 'C:\\tmp')) { New-Item -ItemType Directory -Path 'C:\\tmp' } ; Invoke-RestMethod -Uri ${url} -OutFile C:\\tmp\\aptos.zip; Expand-Archive -Path C:\\tmp\\aptos.zip -DestinationPath C:\\tmp -Force; Move-Item -Path C:\\tmp\\aptos.exe -Destination ${path}"`
    );
  } else if (os === "MacOS") {
    // Install the CLI with brew.
    execSyncShell("brew install aptos");
    // Get the path of the CLI.
    path = getCliPathBrew();
  } else {
    // On Linux, we check what version of OpenSSL we're working with to figure out
    // which binary to download.
    let osVersion = "x86_64";
    let opensSslVersion = "1.0.0";
    try {
      opensSslVersion = getCurrentOpenSSLVersion();
    } catch (error) {
      console.log(
        "Could not determine OpenSSL version, assuming older version (1.x.x)"
      );
    }

    if (opensSslVersion.startsWith("3.")) {
      osVersion = "22.04-x86_64";
    }
    console.log(`Downloading CLI binary ${os}-${osVersion}`);
    const url = `${GH_CLI_DOWNLOAD_URL}/${PNAME}-v${latestCLIVersion}/${PNAME}-${latestCLIVersion}-${os}-${osVersion}.zip`;
    // Download the zip file, extract it, and move the binary to the correct location.
    execSync(
      `curl -L -o /tmp/aptos.zip ${url}; unzip -o -q /tmp/aptos.zip -d /tmp; mv /tmp/aptos ${path};`
    );
  }
};

const main = async () => {
  const os = getOS();

  let path;
  if (os === "MacOS") {
    // Confirm brew is installed.
    const brewInstalled = executableIsAvailable("brew");
    if (!brewInstalled) {
      throw "Please install brew to continue: https://brew.sh/";
    }
    try {
      path = getCliPathBrew();
    } catch (e) {
      path = "";
    }
  } else if (os === "Windows") {
    path = `${__dirname}\\${PNAME}.exe`;
  } else {
    path = `${__dirname}/${PNAME}`;
  }

  // Look up the latest version.
  const latestVersion = await getLatestVersion();

  // If binary does not exist, download it.
  if (!fs.existsSync(path)) {
    console.log("CLI not installed");
    // Install the latest version.
    installCli(os, path, latestVersion);
  } else {
    // Get the current version of the CLI.
    const currentVersion = execSyncShell(`${path} --version`, {
      encoding: "utf8",
    })
      .trim()
      .split(" ")[1];
    console.log(
      `Previously installed CLI version ${currentVersion}, checking for updates`
    );
    // Check if the installed version is the latest version.
    if (currentVersion !== latestVersion) {
      console.log(`A newer version of the CLI is available: ${latestVersion}`);
      installCli(os, path, latestVersion);
    } else {
      console.log(`CLI is up to date`);
    }
  }

  // Spawn a child process to execute the binary with the provided arguments.
  if (os === "Windows") {
    spawn(path, process.argv.slice(2), {
      stdio: "inherit",
      shell: true,
    });
  } else {
    spawn(path, process.argv.slice(2), {
      stdio: "inherit",
    });
  }
};

main().catch(console.error);
