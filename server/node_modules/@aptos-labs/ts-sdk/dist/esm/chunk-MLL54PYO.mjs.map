{"version":3,"sources":["../../src/cli/move.ts"],"sourcesContent":["import { spawn } from \"child_process\";\nimport { platform } from \"os\";\n\nimport { AccountAddress } from \"../core\";\nimport { Network } from \"../utils\";\n\nexport class Move {\n  /**\n   * Function to initialize current directory for Aptos\n   *\n   * Configuration will be pushed into .aptos/config.yaml\n   * @param args.network optional Network type argument to use for default settings, default is local\n   * @param args.profile optional Profile to use from the config file, default is 'default'\n   * This will be used to override associated settings such as the REST URL, the Faucet URL, and the private key arguments.\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * @returns stdout\n   */\n  async init(args: {\n    network?: Network;\n    profile?: string;\n    extraArguments?: Array<string>;\n  }): Promise<{ output: string }> {\n    const { network, profile, extraArguments } = args;\n    const cliArgs = [\"aptos\", \"init\", `--network=${network ?? \"local\"}`, `--profile=${profile ?? \"default\"}`];\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to compile a package\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   *\n   * @returns stdout\n   */\n  async compile(args: {\n    packageDirectoryPath: string;\n    namedAddresses: Record<string, AccountAddress>;\n    extraArguments?: Array<string>;\n  }): Promise<{ output: string }> {\n    const { packageDirectoryPath, namedAddresses, extraArguments } = args;\n    const cliArgs = [\"aptos\", \"move\", \"compile\", \"--package-dir\", packageDirectoryPath];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to run Move unit tests for a package\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * @returns stdout\n   */\n  async test(args: {\n    packageDirectoryPath: string;\n    namedAddresses: Record<string, AccountAddress>;\n    extraArguments?: Array<string>;\n  }): Promise<{ output: string }> {\n    const { packageDirectoryPath, namedAddresses, extraArguments } = args;\n    const cliArgs = [\"aptos\", \"move\", \"test\", \"--package-dir\", packageDirectoryPath];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to publish the modules to the publisher account on the Aptos blockchain\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   * @param args.profile optional Profile to use from the config file.\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * @returns stdout\n   */\n  async publish(args: {\n    packageDirectoryPath: string;\n    namedAddresses: Record<string, AccountAddress>;\n    profile?: string;\n    extraArguments?: Array<string>;\n  }): Promise<{ output: string }> {\n    const { packageDirectoryPath, namedAddresses, profile, extraArguments } = args;\n    const cliArgs = [\n      \"aptos\",\n      \"move\",\n      \"publish\",\n      \"--package-dir\",\n      packageDirectoryPath,\n      `--profile=${profile ?? \"default\"}`,\n    ];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to create a new object and publish the Move package to it on the Aptos blockchain\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.addressName Address name for the Move package\n   * @example\n   * MoonCoin, please find the actual address name in Move.toml\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   * @param args.profile optional Profile to use from the config file.\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * A complete example in cli\n   * aptos move create-object-and-publish-package \\\n   * --package-dir path_to_directory_that_has_move.toml \\\n   * --address-name launchpad_addr \\\n   * --named-addresses \"launchpad_addr=0x123,initial_creator_addr=0x456\"\\\n   * --profile my_profile \\\n   * --assume-yes\n   * @returns object address\n   */\n  async createObjectAndPublishPackage(args: {\n    packageDirectoryPath: string;\n    addressName: string;\n    namedAddresses: Record<string, AccountAddress>;\n    profile?: string;\n    extraArguments?: Array<string>;\n  }): Promise<{ objectAddress: string }> {\n    const { packageDirectoryPath, addressName, namedAddresses, profile, extraArguments } = args;\n    const cliArgs = [\n      \"aptos\",\n      \"move\",\n      \"create-object-and-publish-package\",\n      \"--package-dir\",\n      packageDirectoryPath,\n      \"--address-name\",\n      addressName,\n      `--profile=${profile ?? \"default\"}`,\n    ];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    const result = await this.runCommand(cliArgs);\n    return { objectAddress: this.extractAddressFromOutput(result.output) };\n  }\n\n  /**\n   * Function to upgrade a Move package previously published to an object on the Aptos blockchain\n   * Caller must be the object owner to call this function\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.objectAddress Address of the object that the Move package published to\n   * @example\n   * 0x1000\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   * @param args.profile optional Profile to use from the config file.\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * @returns stdout\n   */\n  async upgradeObjectPackage(args: {\n    packageDirectoryPath: string;\n    objectAddress: string;\n    namedAddresses: Record<string, AccountAddress>;\n    profile?: string;\n    extraArguments?: Array<string>;\n  }): Promise<{ output: string }> {\n    const { packageDirectoryPath, objectAddress, namedAddresses, profile, extraArguments } = args;\n    const cliArgs = [\n      \"aptos\",\n      \"move\",\n      \"upgrade-object-package\",\n      \"--package-dir\",\n      packageDirectoryPath,\n      \"--object-address\",\n      objectAddress,\n      `--profile=${profile ?? \"default\"}`,\n    ];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Build a publication transaction payload and store it in a JSON output file\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.outputFile Output file to write publication transaction to\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * @returns stdout\n   */\n  async buildPublishPayload(args: {\n    packageDirectoryPath: string;\n    outputFile: string;\n    namedAddresses: Record<string, AccountAddress>;\n    extraArguments?: Array<string>;\n  }) {\n    const { outputFile, packageDirectoryPath, namedAddresses, extraArguments } = args;\n    const cliArgs = [\n      \"aptos\",\n      \"move\",\n      \"build-publish-payload\",\n      \"--json-output-file\",\n      outputFile,\n      \"--package-dir\",\n      packageDirectoryPath,\n    ];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to run a Move script, please run compile before running this\n   *\n   * @param args.compiledScriptPath Path to a compiled Move script bytecode file\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * build/my_package/bytecode_scripts/my_move_script.mv\n   * @param args.profile optional Profile to use from the config file.\n   * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings\n   * @example\n   * [\"--assume-yes\",\"--gas-unit-price=10\"]\n   *\n   * @returns stdout\n   */\n  async runScript(args: {\n    compiledScriptPath: string;\n    profile?: string;\n    extraArguments?: Array<string>;\n  }): Promise<{ output: string }> {\n    const { compiledScriptPath, profile, extraArguments } = args;\n    const cliArgs = [\n      \"aptos\",\n      \"move\",\n      \"run-script\",\n      \"--compiled-script-path\",\n      compiledScriptPath,\n      `--profile=${profile ?? \"default\"}`,\n    ];\n\n    if (extraArguments) {\n      cliArgs.push(...extraArguments);\n    }\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Run a move command\n   *\n   * @param args\n   * @returns stdout\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private async runCommand(args: Array<string>): Promise<{ output: string }> {\n    return new Promise((resolve, reject) => {\n      const currentPlatform = platform();\n      let childProcess;\n      let stdout = \"\";\n\n      // Check if current OS is windows\n      if (currentPlatform === \"win32\") {\n        childProcess = spawn(\"npx\", args, { shell: true });\n      } else {\n        childProcess = spawn(\"npx\", args);\n      }\n\n      childProcess.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      childProcess.stdout.pipe(process.stdout);\n      childProcess.stderr.pipe(process.stderr);\n      process.stdin.pipe(childProcess.stdin);\n\n      childProcess.on(\"close\", (code) => {\n        if (code === 0) {\n          resolve({ output: stdout }); // Resolve with stdout if the child process exits successfully\n        } else {\n          reject(new Error(`Child process exited with code ${code}`)); // Reject with an error if the child process exits with an error code\n        }\n      });\n    });\n  }\n\n  /**\n   * Convert named addresses from a Map into an array seperated by a comma\n   *\n   * @example\n   * input: {'alice' => '0x123', 'bob' => '0x456'}\n   * output: \"alice=0x123,bob=0x456\"\n   *\n   * @param namedAddresses\n   * @returns An array of names addresses seperated by a comma\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private prepareNamedAddresses(namedAddresses: Map<string, AccountAddress>): Array<string> {\n    const totalNames = namedAddresses.size;\n    const newArgs: Array<string> = [];\n\n    if (totalNames === 0) {\n      return newArgs;\n    }\n\n    newArgs.push(\"--named-addresses\");\n\n    const names: Array<string> = [];\n    namedAddresses.forEach((value, key) => {\n      const toAppend = `${key}=${value.toString()}`;\n      names.push(toAppend);\n    });\n    newArgs.push(names.join(\",\"));\n    return newArgs;\n  }\n\n  /**\n   * Parse named addresses from a Record type into a Map\n   *\n   * @param namedAddresses\n   * @returns Map<name,address>\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private parseNamedAddresses(namedAddresses: Record<string, AccountAddress>): Map<string, AccountAddress> {\n    const addressesMap = new Map();\n\n    Object.keys(namedAddresses).forEach((key) => {\n      const address = namedAddresses[key];\n      addressesMap.set(key, address);\n    });\n\n    return addressesMap;\n  }\n\n  /**\n   * Extract object address from the output\n   *\n   * @param output\n   * @returns object address\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private extractAddressFromOutput(output: string): string {\n    const match = output.match(\"Code was successfully deployed to object address (0x[0-9a-fA-F]+)\\\\.\");\n    if (match) {\n      return match[1];\n    }\n    throw new Error(\"Failed to extract object address from output\");\n  }\n}\n"],"mappings":"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","names":["spawn","platform","Move","args","network","profile","extraArguments","cliArgs","packageDirectoryPath","namedAddresses","addressesMap","addressName","result","objectAddress","outputFile","compiledScriptPath","resolve","reject","currentPlatform","childProcess","stdout","data","code","totalNames","newArgs","names","value","key","toAppend","address","output","match"]}