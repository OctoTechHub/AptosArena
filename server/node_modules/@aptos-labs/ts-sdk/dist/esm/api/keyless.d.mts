import { HexInput } from '../types/index.mjs';
import { ZeroKnowledgeSig } from '../core/crypto/keyless.mjs';
import { AptosConfig } from './aptosConfig.mjs';
import { EphemeralKeyPair } from '../account/EphemeralKeyPair.mjs';
import { ProofFetchCallback, KeylessAccount } from '../account/KeylessAccount.mjs';
import '../utils/apiEndpoints.mjs';
import '../types/indexer.mjs';
import '../types/generated/operations.mjs';
import '../types/generated/types.mjs';
import '../publicKey-B3XRNhHO.mjs';
import '../bcs/serializer.mjs';
import '../core/hex.mjs';
import '../core/common.mjs';
import '../core/accountAddress.mjs';
import '../bcs/deserializer.mjs';
import '../transactions/instances/transactionArgument.mjs';
import '../core/crypto/signature.mjs';
import '../core/crypto/ephemeral.mjs';
import '../core/crypto/proof.mjs';
import '../types/keyless.mjs';
import '../utils/const.mjs';
import '../core/crypto/privateKey.mjs';
import '../Ed25519Account-B1VMJOY2.mjs';
import '../transactions/authenticator/account.mjs';
import '../core/crypto/ed25519.mjs';
import '../core/crypto/multiEd25519.mjs';
import '../core/crypto/multiKey.mjs';
import '../core/crypto/singleKey.mjs';
import '../transactions/types.mjs';
import '../bcs/serializable/moveStructs.mjs';
import '../bcs/serializable/movePrimitives.mjs';
import '../bcs/serializable/fixedBytes.mjs';
import '../transactions/instances/rawTransaction.mjs';
import '../transactions/instances/chainId.mjs';
import '../transactions/instances/transactionPayload.mjs';
import '../transactions/instances/identifier.mjs';
import '../transactions/instances/moduleId.mjs';
import '../transactions/typeTag/index.mjs';
import '../transactions/instances/simpleTransaction.mjs';
import '../transactions/instances/multiAgentTransaction.mjs';

/**
 * A class to query all `Keyless` related queries on Aptos.
 *
 * More documentation on how to integrate Keyless Accounts see the below
 * https://aptos.dev/guides/keyless-accounts/#aptos-keyless-integration-guide
 */
declare class Keyless {
    readonly config: AptosConfig;
    constructor(config: AptosConfig);
    /**
     * Fetches the pepper from the Aptos pepper service API.
     *
     * @param args.jwt JWT token
     * @param args.ephemeralKeyPair the EphemeralKeyPair used to generate the nonce in the JWT token
     * @param args.derivationPath a derivation path used for creating multiple accounts per user via the BIP-44 standard. Defaults
     * to "m/44'/637'/0'/0'/0".
     * @returns The pepper which is a Uint8Array of length 31.
     */
    getPepper(args: {
        jwt: string;
        ephemeralKeyPair: EphemeralKeyPair;
        derivationPath?: string;
    }): Promise<Uint8Array>;
    /**
     * Fetches a proof from the Aptos prover service API.
     *
     * @param args.jwt JWT token
     * @param args.ephemeralKeyPair the EphemeralKeyPair used to generate the nonce in the JWT token
     * @param args.uidKey a key in the JWT token to use to set the uidVal in the IdCommitment
     * @param args.pepper the pepper used for the account.  If not provided it will be fetched from the Aptos pepper service
     *
     * @returns The proof which is represented by a ZeroKnowledgeSig.
     */
    getProof(args: {
        jwt: string;
        ephemeralKeyPair: EphemeralKeyPair;
        pepper?: HexInput;
        uidKey?: string;
    }): Promise<ZeroKnowledgeSig>;
    /**
     * Derives the Keyless Account from the JWT token and corresponding EphemeralKeyPair.  It will lookup the pepper from
     * the pepper service if not explicitly provided.  It will compute the proof via the proving service.  It will ch
     *
     * @param args.jwt JWT token
     * @param args.ephemeralKeyPair the EphemeralKeyPair used to generate the nonce in the JWT token
     * @param args.uidKey a key in the JWT token to use to set the uidVal in the IdCommitment
     * @param args.pepper the pepper
     * @param args.proofFetchCallback a callback function that if set, the fetch of the proof will be done in the background. Once
     * fetching finishes the callback function will be called.  This should be used to provide a more responsive user experience as now
     * they are not blocked on fetching the proof. Thus the function will return much more quickly.
     *
     * @returns A KeylessAccount that can be used to sign transactions
     */
    deriveKeylessAccount(args: {
        jwt: string;
        ephemeralKeyPair: EphemeralKeyPair;
        uidKey?: string;
        pepper?: HexInput;
        proofFetchCallback?: ProofFetchCallback;
    }): Promise<KeylessAccount>;
}

export { Keyless };
