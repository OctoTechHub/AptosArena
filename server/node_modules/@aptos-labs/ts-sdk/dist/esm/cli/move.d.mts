import { AccountAddress } from '../core/accountAddress.mjs';
import { Network } from '../utils/apiEndpoints.mjs';
import '../bcs/serializer.mjs';
import '../core/hex.mjs';
import '../core/common.mjs';
import '../types/index.mjs';
import '../types/indexer.mjs';
import '../types/generated/operations.mjs';
import '../types/generated/types.mjs';
import '../bcs/deserializer.mjs';
import '../transactions/instances/transactionArgument.mjs';

declare class Move {
    /**
     * Function to initialize current directory for Aptos
     *
     * Configuration will be pushed into .aptos/config.yaml
     * @param args.network optional Network type argument to use for default settings, default is local
     * @param args.profile optional Profile to use from the config file, default is 'default'
     * This will be used to override associated settings such as the REST URL, the Faucet URL, and the private key arguments.
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * @returns stdout
     */
    init(args: {
        network?: Network;
        profile?: string;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Function to compile a package
     *
     * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)
     * @param args.namedAddresses  Named addresses for the move binary
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     * @example
     * {
     *  alice:0x1234, bob:0x5678
     * }
     *
     * @returns stdout
     */
    compile(args: {
        packageDirectoryPath: string;
        namedAddresses: Record<string, AccountAddress>;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Function to run Move unit tests for a package
     *
     * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)
     * @param args.namedAddresses  Named addresses for the move binary
     * @example
     * {
     *  alice:0x1234, bob:0x5678
     * }
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * @returns stdout
     */
    test(args: {
        packageDirectoryPath: string;
        namedAddresses: Record<string, AccountAddress>;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Function to publish the modules to the publisher account on the Aptos blockchain
     *
     * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)
     * @param args.namedAddresses  Named addresses for the move binary
     * @example
     * {
     *  alice:0x1234, bob:0x5678
     * }
     * @param args.profile optional Profile to use from the config file.
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * @returns stdout
     */
    publish(args: {
        packageDirectoryPath: string;
        namedAddresses: Record<string, AccountAddress>;
        profile?: string;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Function to create a new object and publish the Move package to it on the Aptos blockchain
     *
     * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)
     * @param args.addressName Address name for the Move package
     * @example
     * MoonCoin, please find the actual address name in Move.toml
     * @param args.namedAddresses  Named addresses for the move binary
     * @example
     * {
     *  alice:0x1234, bob:0x5678
     * }
     * @param args.profile optional Profile to use from the config file.
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * A complete example in cli
     * aptos move create-object-and-publish-package \
     * --package-dir path_to_directory_that_has_move.toml \
     * --address-name launchpad_addr \
     * --named-addresses "launchpad_addr=0x123,initial_creator_addr=0x456"\
     * --profile my_profile \
     * --assume-yes
     * @returns object address
     */
    createObjectAndPublishPackage(args: {
        packageDirectoryPath: string;
        addressName: string;
        namedAddresses: Record<string, AccountAddress>;
        profile?: string;
        extraArguments?: Array<string>;
    }): Promise<{
        objectAddress: string;
    }>;
    /**
     * Function to upgrade a Move package previously published to an object on the Aptos blockchain
     * Caller must be the object owner to call this function
     *
     * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)
     * @param args.objectAddress Address of the object that the Move package published to
     * @example
     * 0x1000
     * @param args.namedAddresses  Named addresses for the move binary
     * @example
     * {
     *  alice:0x1234, bob:0x5678
     * }
     * @param args.profile optional Profile to use from the config file.
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * @returns stdout
     */
    upgradeObjectPackage(args: {
        packageDirectoryPath: string;
        objectAddress: string;
        namedAddresses: Record<string, AccountAddress>;
        profile?: string;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Build a publication transaction payload and store it in a JSON output file
     *
     * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)
     * @param args.outputFile Output file to write publication transaction to
     * @param args.namedAddresses  Named addresses for the move binary
     * @example
     * {
     *  alice:0x1234, bob:0x5678
     * }
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * @returns stdout
     */
    buildPublishPayload(args: {
        packageDirectoryPath: string;
        outputFile: string;
        namedAddresses: Record<string, AccountAddress>;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Function to run a Move script, please run compile before running this
     *
     * @param args.compiledScriptPath Path to a compiled Move script bytecode file
     * @param args.namedAddresses  Named addresses for the move binary
     * @example
     * build/my_package/bytecode_scripts/my_move_script.mv
     * @param args.profile optional Profile to use from the config file.
     * @param args.extraArguments (optional) Any extra arguments to include in the form of an array of strings
     * @example
     * ["--assume-yes","--gas-unit-price=10"]
     *
     * @returns stdout
     */
    runScript(args: {
        compiledScriptPath: string;
        profile?: string;
        extraArguments?: Array<string>;
    }): Promise<{
        output: string;
    }>;
    /**
     * Run a move command
     *
     * @param args
     * @returns stdout
     */
    private runCommand;
    /**
     * Convert named addresses from a Map into an array seperated by a comma
     *
     * @example
     * input: {'alice' => '0x123', 'bob' => '0x456'}
     * output: "alice=0x123,bob=0x456"
     *
     * @param namedAddresses
     * @returns An array of names addresses seperated by a comma
     */
    private prepareNamedAddresses;
    /**
     * Parse named addresses from a Record type into a Map
     *
     * @param namedAddresses
     * @returns Map<name,address>
     */
    private parseNamedAddresses;
    /**
     * Extract object address from the output
     *
     * @param output
     * @returns object address
     */
    private extractAddressFromOutput;
}

export { Move };
