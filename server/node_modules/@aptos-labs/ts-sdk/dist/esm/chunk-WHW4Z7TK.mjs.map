{"version":3,"sources":["../../src/api/keyless.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { EphemeralKeyPair, KeylessAccount, ProofFetchCallback } from \"../account\";\nimport { ZeroKnowledgeSig } from \"../core\";\nimport { deriveKeylessAccount, getPepper, getProof } from \"../internal/keyless\";\nimport { HexInput } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to query all `Keyless` related queries on Aptos.\n *\n * More documentation on how to integrate Keyless Accounts see the below\n * https://aptos.dev/guides/keyless-accounts/#aptos-keyless-integration-guide\n */\nexport class Keyless {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Fetches the pepper from the Aptos pepper service API.\n   *\n   * @param args.jwt JWT token\n   * @param args.ephemeralKeyPair the EphemeralKeyPair used to generate the nonce in the JWT token\n   * @param args.derivationPath a derivation path used for creating multiple accounts per user via the BIP-44 standard. Defaults\n   * to \"m/44'/637'/0'/0'/0\".\n   * @returns The pepper which is a Uint8Array of length 31.\n   */\n  async getPepper(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    derivationPath?: string;\n  }): Promise<Uint8Array> {\n    return getPepper({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches a proof from the Aptos prover service API.\n   *\n   * @param args.jwt JWT token\n   * @param args.ephemeralKeyPair the EphemeralKeyPair used to generate the nonce in the JWT token\n   * @param args.uidKey a key in the JWT token to use to set the uidVal in the IdCommitment\n   * @param args.pepper the pepper used for the account.  If not provided it will be fetched from the Aptos pepper service\n   *\n   * @returns The proof which is represented by a ZeroKnowledgeSig.\n   */\n  async getProof(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper?: HexInput;\n    uidKey?: string;\n  }): Promise<ZeroKnowledgeSig> {\n    return getProof({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Derives the Keyless Account from the JWT token and corresponding EphemeralKeyPair.  It will lookup the pepper from\n   * the pepper service if not explicitly provided.  It will compute the proof via the proving service.  It will ch\n   *\n   * @param args.jwt JWT token\n   * @param args.ephemeralKeyPair the EphemeralKeyPair used to generate the nonce in the JWT token\n   * @param args.uidKey a key in the JWT token to use to set the uidVal in the IdCommitment\n   * @param args.pepper the pepper\n   * @param args.proofFetchCallback a callback function that if set, the fetch of the proof will be done in the background. Once\n   * fetching finishes the callback function will be called.  This should be used to provide a more responsive user experience as now\n   * they are not blocked on fetching the proof. Thus the function will return much more quickly.\n   *\n   * @returns A KeylessAccount that can be used to sign transactions\n   */\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<KeylessAccount> {\n    return deriveKeylessAccount({ aptosConfig: this.config, ...args });\n  }\n}\n"],"mappings":"uDAeO,IAAMA,EAAN,KAAc,CACnB,YAAqBC,EAAqB,CAArB,YAAAA,CAAsB,CAW3C,MAAM,UAAUC,EAIQ,CACtB,OAAOC,EAAU,CAAE,YAAa,KAAK,OAAQ,GAAGD,CAAK,CAAC,CACxD,CAYA,MAAM,SAASA,EAKe,CAC5B,OAAOE,EAAS,CAAE,YAAa,KAAK,OAAQ,GAAGF,CAAK,CAAC,CACvD,CAgBA,MAAM,qBAAqBA,EAMC,CAC1B,OAAOG,EAAqB,CAAE,YAAa,KAAK,OAAQ,GAAGH,CAAK,CAAC,CACnE,CACF","names":["Keyless","config","args","getPepper","getProof","deriveKeylessAccount"]}